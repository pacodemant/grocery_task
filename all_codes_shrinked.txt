// ./lib/home/repository/products_repository.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:grocery_task/home/models/product.dart';


class ProductsRepository {
  final CollectionReference _productsCollection = FirebaseFirestore.instance.collection('products');

  Future<List<Product>> getProducts() async {
    final querySnapshot = await _productsCollection.get();
    return querySnapshot.docs.map((doc) => Product.fromFirestore(doc.data() as Map<String, dynamic>)).toList();
  }

Future<void> addProducts(List<Product> products) async {
  for (var product in products) {
    await _productsCollection.add(product.toMap());
  }
}
}

final List<Product> productsMock = [
  const Product(
    name: 'Fresh Peach',
    description: 'dozen',
    price: 8.00,
    imageAsset: 'assets/images/peach.png',
    color: Color(
      0xffFFCEC1,
    ),
  ),
  const Product(
    name: 'Avocado',
    description: '2.0 lbs',
    price: 7.00,
    imageAsset: 'assets/images/avocado.png',
    color: Color(
      0xffFCFFD9,
    ),
    badge: ProductBadge(
      name: 'New',
      color: Color(0xffE8AD41),
    ),
  ),
  const Product(
    name: 'Pineapple',
    description: '1.15 lbs',
    price: 9.90,
    imageAsset: 'assets/images/pineapple.png',
    color: Color(
      0xffFFE6C2,
    ),
  ),
  const Product(
    name: 'Black grapes',
    description: '5 lbs',
    price: 7.05,
    imageAsset: 'assets/images/grapes.png',
    color: Color(
      0xffFEE1ED,
    ),
    badge: ProductBadge(
      name: '-16%',
      color: Color(0xffF56262),
    ),
  ),
  const Product(
    name: 'Pomegranate',
    description: '1.50 lbs',
    price: 2.09,
    imageAsset: 'assets/images/pomegranate.png',
    color: Color(
      0xffFFE3E2,
    ),
    badge: ProductBadge(
      name: 'New',
      color: Color(0xffE8AD41),
    ),
  ),
  const Product(
    name: 'Fresh Broccoli',
    description: '3 lbs',
    price: 1,
    imageAsset: 'assets/images/broccoli.png',
    color: Color(
      0xffD2FFD0,
    ),
  ),
];

// ./lib/home/repository/categories_repository.dart
import 'dart:ui';

import 'package:grocery_task/home/models/category.dart';

class CategoryRepository {
  List<Category> getCategories() {
    return categoriesMock;
  }
}

// ignore: prefer_const_declarations
final List<Category> categoriesMock = const [
  Category(
    name: 'Vegetable',
    iconAsset: 'assets/icons/vegetables.png',
    color: Color(0xff28B446),
  ),
  Category(
    name: 'Fruits',
    iconAsset: 'assets/icons/fruits.png',
    color: Color(0xffF8644A),
  ),
  Category(
    name: 'Beverages',
    iconAsset: 'assets/icons/beverages.png',
    color: Color(0xffF5BA3C),
  ),
  Category(
    name: 'Grocery',
    iconAsset: 'assets/icons/grocery.png',
    color: Color(0xffAE80FF),
  ),
  Category(
    name: 'Edible Oil',
    iconAsset: 'assets/icons/edible_oil.png',
    color: Color(0xff0CD4DC),
  ),
  Category(
    name: 'Household',
    iconAsset: 'assets/icons/vacuum.png',
    color: Color(0xffFF7EB6),
  ),
];

// ./lib/home/models/product.dart
import 'dart:ui';

import 'package:grocery_task/home/models/category.dart';

class Product {
  final String name;
  final String description;
  final double price;
  final Category? category;

  final String imageAsset;

  final Color color;

  final ProductBadge? badge;

  const Product({
    required this.name,
    required this.description,
    required this.price,
    required this.imageAsset,
    required this.color,
    this.category,
    this.badge,
  });

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'description': description,
      'price': price,
      'imageAsset': imageAsset,
      'color': color.value.toString(),
      //DRUNTER - da wir f√ºr die Aufgabe category und badge nicht brauchen, sind sie auskommentiert
      //'category': category?.toMap(),
      //'badge': badge?.toMap(),
    };
  }
  factory Product.fromFirestore(Map<String, dynamic> firestoreDocument) {
    return Product(
      name: firestoreDocument['name'],
      description: firestoreDocument['description'],
      price: firestoreDocument['price'],
      imageAsset: firestoreDocument['imageAsset'],
      //DRUNTER - die Farbe wird aus dem Firestore Dokument gelesen (ist noch String) und in einen Color-Typ umgewandelt
      color: Color(
        int.parse(
          firestoreDocument['color'],
        ),
      ),
    );
  }
}

class ProductBadge {
  final String name;
  final Color color;

  const ProductBadge({
    required this.name,
    required this.color,
  });
}


// ./lib/home/home_page.dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:grocery_task/home/models/cart.dart';
import 'package:grocery_task/home/models/product.dart';
import 'package:grocery_task/home/repository/products_repository.dart';
import 'package:grocery_task/home/widgets/action_headline.dart';
import 'package:grocery_task/home/widgets/categories_section.dart';
import 'package:grocery_task/home/widgets/hero_image.dart';
import 'package:grocery_task/home/widgets/product_item.dart';

class HomePage extends StatefulWidget {
  const HomePage({required this.toggleTheme, Key? key}) : super(key: key);

  final VoidCallback toggleTheme;

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  Future<List<Product>>? _products;
  final ProductsRepository _productsRepository = ProductsRepository();

  final Cart cart = Cart([]);

  final List<Product> wishlist = [];

  @override
  void initState() {
    super.initState();
    _products = _productsRepository.getProducts();
  }

  void onAddItem(Product product) {
    setState(() {
      if (cart.items.any((element) => element.product == product)) {
        cart.items
            .firstWhere((element) => element.product == product)
            .quantity++;
        return;
      } else {
        cart.items.add(
          CartItem(product: product, quantity: 1),
        );
      }
    });
  }

  void onRemoveItem(Product product) {
    setState(() {
      if (cart.items.any((element) => element.product == product) &&
          cart.items
                  .firstWhere((element) => element.product == product)
                  .quantity >
              1) {
        cart.items
            .firstWhere((element) => element.product == product)
            .quantity--;
        return;
      } else {
        cart.items.removeWhere((element) => element.product == product);
      }
    });
  }

  void toggleFavoriteList(Product product) {
    setState(() {
      if (wishlist.contains(product)) {
        wishlist.remove(product);
      } else {
        wishlist.add(product);
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => FocusScope.of(context).unfocus(),
      child: Scaffold(
          body: Padding(
            padding: const EdgeInsets.all(16.0),
            child: ListView(
              children: [
                ClipRRect(
                  borderRadius: BorderRadius.circular(6),
                  child: const TextField(
                    decoration: InputDecoration(
                      hintText: 'Search keywords..',
                      prefixIcon: Icon(Icons.search),
                      fillColor: Color(0xffe4e5e9),
                      filled: true,
                      border: InputBorder.none,
                    ),
                  ),
                ),
                const SizedBox(height: 20),
                const HeroImage(),
                const SizedBox(height: 20),
                CategoriesSection(),
                const SizedBox(height: 20),
                const ActionHeadline(title: 'Featured products'),
                const SizedBox(height: 12),
                FutureBuilder<List<Product>>(
                  future: _products,
                  builder: (context, snapshot) {
                    if (snapshot.connectionState == ConnectionState.waiting) {
                      return const CircularProgressIndicator();
                    } else if (snapshot.hasError) {
                      return Text('Fehler: ${snapshot.error}');
                    } else {
                      final products = snapshot.data ?? [];
                      return Wrap(
                        runSpacing: 20,
                        alignment: WrapAlignment.spaceBetween,
                        children: [
                          for (final product in products)
                            ProductItem(
                              product: product,
                              quantity: cart.items
                                  .firstWhere(
                                      (element) => element.product == product,
                                      orElse: () => CartItem(
                                          product: product, quantity: 0))
                                  .quantity,
                              onAddToCart: () => onAddItem(product),
                              onRemoveItem: () => onRemoveItem(product),
                              toggleFavorite: () => toggleFavoriteList(product),
                              isFavorite: wishlist.contains(product),
                            ),
                        ],
                      );
                    }
                  },
                ),
                const SizedBox(
                  height: 22,
                ),
                FilledButton(
                  onPressed: () {
                    widget.toggleTheme();
                  },
                  child: const Text('Change Theme'),
                ),
              ].animate(interval: const Duration(milliseconds: 100)).fadeIn(),
            ),
          ),
          bottomNavigationBar: BottomNavigationBar(
            showSelectedLabels: false,
            showUnselectedLabels: false,
            items: const [
              BottomNavigationBarItem(
                icon: Icon(CupertinoIcons.home),
                label: 'Home',
              ),
              BottomNavigationBarItem(
                icon: Icon(CupertinoIcons.cart),
                label: 'Cart',
              ),
              BottomNavigationBarItem(
                icon: Icon(CupertinoIcons.heart),
                label: 'Wishlist',
              ),
            ],
          )),
    );
  }
}


// ./lib/home/widgets/product_item.dart
import 'package:flutter/material.dart';
import 'package:grocery_task/home/models/product.dart';

class ProductItem extends StatelessWidget {
  const ProductItem({
    super.key,
    required this.product,
    required this.quantity,
    required this.onAddToCart,
    required this.onRemoveItem,
    required this.toggleFavorite,
    required this.isFavorite,
  });

  final Product product;
  final int quantity;

  final VoidCallback onAddToCart;

  final VoidCallback onRemoveItem;

  final VoidCallback toggleFavorite;

  final bool isFavorite;
  @override
  Widget build(BuildContext context) {
    return Container(
      width: 170,
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.background,
        borderRadius: BorderRadius.circular(10),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (product.badge != null)
                Align(
                  alignment: Alignment.topLeft,
                  child: Container(
                    padding: const EdgeInsets.all(4),
                    decoration: BoxDecoration(
                      color: product.badge!.color.withOpacity(0.2),
                    ),
                    child: Text(
                      product.badge!.name,
                      style: TextStyle(
                        color: product.badge!.color,
                        fontSize: 12,
                      ),
                    ),
                  ),
                ),
              const Spacer(),
              IconButton(
                onPressed: toggleFavorite,
                icon: Icon(
                  isFavorite ? Icons.favorite : Icons.favorite_border_rounded,
                  color: isFavorite ? Colors.red : null,
                ),
              ),
            ],
          ),
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Stack(
                  clipBehavior: Clip.none,
                  children: [
                    CircleAvatar(
                      backgroundColor: product.color,
                      radius: 50,
                    ),
                    Positioned(
                      bottom: -15,
                      left: 0,
                      right: 0,
                      child: Image.asset(
                        product.imageAsset,
                        width: 150,
                        height: 75,
                        fit: BoxFit.contain,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 28),
                Text(
                  '\$${product.price}',
                  style: const TextStyle(color: Colors.green),
                ),
                Text(
                  product.name,
                  style: const TextStyle(
                      fontWeight: FontWeight.bold, fontSize: 16),
                ),
                Text(
                  product.description,
                  style: const TextStyle(color: Colors.grey),
                ),
              ],
            ),
          ),
          const Divider(),
          if (quantity > 0)
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                IconButton(
                  onPressed: () {
                    onRemoveItem();
                  },
                  icon: const Icon(Icons.remove),
                ),
                Text(
                  quantity.toString(),
                ),
                IconButton(
                  onPressed: () {
                    onAddToCart();
                  },
                  icon: const Icon(Icons.add),
                ),
              ],
            )
          else
            TextButton(
              onPressed: () {
                onAddToCart();
              },
              child: const Text('Add to cart'),
            ),
        ],
      ),
    );
  }
}



// ./lib/main.dart
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:grocery_task/app.dart';
import 'package:grocery_task/firebase_options.dart';
import 'package:grocery_task/home/home_page.dart';
import 'package:grocery_task/home/repository/products_repository.dart';

void main() async{
     WidgetsFlutterBinding.ensureInitialized();
   await Firebase.initializeApp(
     options: DefaultFirebaseOptions.currentPlatform,
   );

  final productsRepository = ProductsRepository();
  await productsRepository.addProducts(productsMock);

  runApp(const App());
}



// ./lib/app.dart
import 'package:flutter/material.dart';
import 'package:grocery_task/consts/theme/theme.dart';
import 'package:grocery_task/home/home_page.dart';

class App extends StatefulWidget {
  const App({super.key});

  @override
  State<App> createState() => _AppState();
}

class _AppState extends State<App> {
  // This widget is the root of your application.

  bool isDark = false;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      debugShowCheckedModeBanner: false,
      theme: theme,
      darkTheme: darkTheme,
      themeMode: isDark ? ThemeMode.dark : ThemeMode.light,
      home: HomePage(
        toggleTheme: () {
          setState(() {
            isDark = !isDark;
          });
        },
      ),
    );
  }
}

